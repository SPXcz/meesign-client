// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Void Function(Buffer)>(
    symbol: 'buffer_free', assetId: 'package:meesign_native/libmeesign_crypto')
external void buffer_free(
  Buffer buffer,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'error_free', assetId: 'package:meesign_native/libmeesign_crypto')
external void error_free(
  ffi.Pointer<ffi.Char> error,
);

@ffi.Native<Buffer Function(ffi.Pointer<Protocol>)>(
    symbol: 'protocol_serialize',
    assetId: 'package:meesign_native/libmeesign_crypto')
external Buffer protocol_serialize(
  ffi.Pointer<Protocol> proto_ptr,
);

@ffi.Native<
        ffi.Pointer<Protocol> Function(ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>(
    symbol: 'protocol_deserialize',
    assetId: 'package:meesign_native/libmeesign_crypto')
external ffi.Pointer<Protocol> protocol_deserialize(
  ffi.Pointer<ffi.Uint8> ctx_ptr,
  int ctx_len,
);

@ffi.Native<ffi.Pointer<Protocol> Function(ffi.Int32, ffi.Bool)>(
    symbol: 'protocol_keygen',
    assetId: 'package:meesign_native/libmeesign_crypto')
external ffi.Pointer<Protocol> protocol_keygen(
  int proto_id,
  bool with_card,
);

@ffi.Native<
        Buffer Function(ffi.Pointer<Protocol>, ffi.Pointer<ffi.Uint8>,
            ffi.UintPtr, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'protocol_advance',
    assetId: 'package:meesign_native/libmeesign_crypto')
external Buffer protocol_advance(
  ffi.Pointer<Protocol> proto_ptr,
  ffi.Pointer<ffi.Uint8> data_ptr,
  int data_len,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
);

@ffi.Native<
        Buffer Function(
            ffi.Pointer<Protocol>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'protocol_finish',
    assetId: 'package:meesign_native/libmeesign_crypto')
external Buffer protocol_finish(
  ffi.Pointer<Protocol> proto_ptr,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
);

@ffi.Native<
        ffi.Pointer<Protocol> Function(
            ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>(
    symbol: 'protocol_init',
    assetId: 'package:meesign_native/libmeesign_crypto')
external ffi.Pointer<Protocol> protocol_init(
  int proto_id,
  ffi.Pointer<ffi.Uint8> group_ptr,
  int group_len,
);

@ffi.Native<ffi.Void Function(AuthKey)>(
    symbol: 'auth_key_free',
    assetId: 'package:meesign_native/libmeesign_crypto')
external void auth_key_free(
  AuthKey key,
);

@ffi.Native<
        AuthKey Function(
            ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'auth_keygen', assetId: 'package:meesign_native/libmeesign_crypto')
external AuthKey auth_keygen(
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
);

@ffi.Native<
        Buffer Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.UintPtr,
            ffi.Pointer<ffi.Uint8>,
            ffi.UintPtr,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'auth_cert_key_to_pkcs12',
    assetId: 'package:meesign_native/libmeesign_crypto')
external Buffer auth_cert_key_to_pkcs12(
  ffi.Pointer<ffi.Uint8> key_ptr,
  int key_len,
  ffi.Pointer<ffi.Uint8> cert_ptr,
  int cert_len,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
);

@ffi.Native<
        Buffer Function(
            ffi.Pointer<ffi.Uint8>,
            ffi.UintPtr,
            ffi.Pointer<ffi.Uint8>,
            ffi.UintPtr,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>(
    symbol: 'encrypt', assetId: 'package:meesign_native/libmeesign_crypto')
external Buffer encrypt(
  ffi.Pointer<ffi.Uint8> msg_ptr,
  int msg_len,
  ffi.Pointer<ffi.Uint8> key_ptr,
  int key_len,
  ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
);

abstract class ProtocolId {
  static const int Gg18 = 0;
  static const int Elgamal = 1;
  static const int Frost = 2;
}

abstract class Recipient {
  static const int Unknown = 0;
  static const int Card = 1;
  static const int Server = 2;
}

final class Protocol extends ffi.Opaque {}

final class Buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.UintPtr()
  external int len;

  @ffi.Int32()
  external int rec;
}

final class AuthKey extends ffi.Struct {
  external Buffer key;

  external Buffer csr;
}
