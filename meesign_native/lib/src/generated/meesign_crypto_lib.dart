// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to meesign-crypto C API
class MeeSignCryptoLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MeeSignCryptoLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MeeSignCryptoLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void buffer_free(
    Buffer buffer,
  ) {
    return _buffer_free(
      buffer,
    );
  }

  late final _buffer_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Buffer)>>('buffer_free');
  late final _buffer_free = _buffer_freePtr.asFunction<void Function(Buffer)>();

  void error_free(
    ffi.Pointer<ffi.Char> error,
  ) {
    return _error_free(
      error,
    );
  }

  late final _error_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'error_free');
  late final _error_free =
      _error_freePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void protocol_result_free(
    ProtocolResult res,
  ) {
    return _protocol_result_free(
      res,
    );
  }

  late final _protocol_result_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ProtocolResult)>>(
          'protocol_result_free');
  late final _protocol_result_free =
      _protocol_result_freePtr.asFunction<void Function(ProtocolResult)>();

  ProtocolResult protocol_keygen(
    int proto_id,
  ) {
    return _protocol_keygen(
      proto_id,
    );
  }

  late final _protocol_keygenPtr =
      _lookup<ffi.NativeFunction<ProtocolResult Function(ffi.Int32)>>(
          'protocol_keygen');
  late final _protocol_keygen =
      _protocol_keygenPtr.asFunction<ProtocolResult Function(int)>();

  ProtocolResult protocol_advance(
    ffi.Pointer<ffi.Uint8> ctx_ptr,
    int ctx_len,
    ffi.Pointer<ffi.Uint8> data_ptr,
    int data_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
  ) {
    return _protocol_advance(
      ctx_ptr,
      ctx_len,
      data_ptr,
      data_len,
      error_out,
    );
  }

  late final _protocol_advancePtr = _lookup<
      ffi.NativeFunction<
          ProtocolResult Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('protocol_advance');
  late final _protocol_advance = _protocol_advancePtr.asFunction<
      ProtocolResult Function(ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ProtocolResult protocol_finish(
    ffi.Pointer<ffi.Uint8> ctx_ptr,
    int ctx_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
  ) {
    return _protocol_finish(
      ctx_ptr,
      ctx_len,
      error_out,
    );
  }

  late final _protocol_finishPtr = _lookup<
      ffi.NativeFunction<
          ProtocolResult Function(ffi.Pointer<ffi.Uint8>, ffi.UintPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('protocol_finish');
  late final _protocol_finish = _protocol_finishPtr.asFunction<
      ProtocolResult Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ProtocolResult protocol_init(
    int proto_id,
    ffi.Pointer<ffi.Uint8> group_ptr,
    int group_len,
  ) {
    return _protocol_init(
      proto_id,
      group_ptr,
      group_len,
    );
  }

  late final _protocol_initPtr = _lookup<
      ffi.NativeFunction<
          ProtocolResult Function(ffi.Int32, ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>>('protocol_init');
  late final _protocol_init = _protocol_initPtr
      .asFunction<ProtocolResult Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  void auth_key_free(
    AuthKey key,
  ) {
    return _auth_key_free(
      key,
    );
  }

  late final _auth_key_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AuthKey)>>('auth_key_free');
  late final _auth_key_free =
      _auth_key_freePtr.asFunction<void Function(AuthKey)>();

  AuthKey auth_keygen(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
  ) {
    return _auth_keygen(
      name,
      error_out,
    );
  }

  late final _auth_keygenPtr = _lookup<
      ffi.NativeFunction<
          AuthKey Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('auth_keygen');
  late final _auth_keygen = _auth_keygenPtr.asFunction<
      AuthKey Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  Buffer auth_cert_key_to_pkcs12(
    ffi.Pointer<ffi.Uint8> key_ptr,
    int key_len,
    ffi.Pointer<ffi.Uint8> cert_ptr,
    int cert_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
  ) {
    return _auth_cert_key_to_pkcs12(
      key_ptr,
      key_len,
      cert_ptr,
      cert_len,
      error_out,
    );
  }

  late final _auth_cert_key_to_pkcs12Ptr = _lookup<
      ffi.NativeFunction<
          Buffer Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('auth_cert_key_to_pkcs12');
  late final _auth_cert_key_to_pkcs12 = _auth_cert_key_to_pkcs12Ptr.asFunction<
      Buffer Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  Buffer encrypt(
    ffi.Pointer<ffi.Uint8> msg_ptr,
    int msg_len,
    ffi.Pointer<ffi.Uint8> key_ptr,
    int key_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
  ) {
    return _encrypt(
      msg_ptr,
      msg_len,
      key_ptr,
      key_len,
      error_out,
    );
  }

  late final _encryptPtr = _lookup<
      ffi.NativeFunction<
          Buffer Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('encrypt');
  late final _encrypt = _encryptPtr.asFunction<
      Buffer Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();
}

class Buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.UintPtr()
  external int len;

  @ffi.UintPtr()
  external int capacity;
}

class ProtocolResult extends ffi.Struct {
  external Buffer context;

  external Buffer data;
}

class AuthKey extends ffi.Struct {
  external Buffer key;

  external Buffer csr;
}
